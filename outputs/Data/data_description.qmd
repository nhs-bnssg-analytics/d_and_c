---
title: "Description"
format: html
order: 2
execute: 
  echo: false
---

## Data description

An approximate model of how demand and capacity metrics can be seen below:

![Approximate schematic of relationships between demand and capacity and performance](d_and_c_schematic.png)

```{r}
#| message: false
#| label: source-scripts

source(here::here("R/00_libraries.R"))
source(here::here("R/01_utils.R"))
source(here::here("R/04_modelling_utils.R"))
```

```{r}
#| label: collate-data

dc_data <- list.files(
  here::here("data"), 
  full.names = TRUE
  ) |> 
  (\(x) x[!grepl("configuration-table", x)])() |> 
  purrr::map_dfr(
    read.csv
  ) |> 
  select(
    "metric",
    "year", "quarter", "month", "frequency",
    "org", "org_name", 
    "numerator", "denominator", "value"
  ) |> 
  mutate(
    across(
      c(year, quarter, month),
      as.integer
    )
  )

```



### Data definitions

The metrics collated for the project are presented in the tabs below. for a fuller description, see [Modelling inputs](data_metadata.qmd#demand):

```{r}
#| label: indicator-metadata
#| results: 'asis'

meta_table <- read.csv(here::here("data/configuration-table.csv"),
                       encoding = "latin1") |> 
  filter(
    status == "include" |
      (domain == "Performance" &
         status == "modelled")
  ) |> 
  select("theme", "metric", "domain") |> 
  arrange(theme, metric)
  
cat("::: {.panel-tabset}\n\n")

for (dom in (sort(unique(meta_table$domain)))) {
  cat(paste("##",
          dom,
          "\n\n"))
  
  tb <- meta_table |> 
    filter(
      domain == dom
    ) |> 
    select(!c("domain")) |> 
    knitr::kable(
      format = "markdown",
      col.names = c("Theme", "Metric")
    )
  
  print(tb)
  
  cat("\n\n")
}

cat(":::")
```

## Data summary

The frequencies these metrics have been collected at are displayed below:

```{r}
#| label: data-description
#| fig-height: 14
#| fig-width: 18
#| warning: false

target_variable <- c(
  "Proportion of incomplete pathways greater than 18 weeks from referral",
  "Proportion of suspected cancer or referral to first definitive treatment that are longer than 62 days wait",
  "Proportion of A&E attendances with greater than 4 hours wait (Type 1 Departments - Major A&E)",
  "Proportion of attended GP appointments (over 4 weeks wait time)"
)

metrics <- read.csv(
  here::here(
    "data/configuration-table.csv"
  ),
  encoding = "latin1"
) |> 
  select(
    "metric", "domain"
  )

# removes records where NAs exist for target variables because the target
# variable columns only exist once in each tibble from the "map" step, but NAs
# are generated when they are list_rbind() together
clean_target_variables <- function(data, target_variables) {
  targ_vars <- data |> 
    filter(
      metric %in% target_variables,
      !is.na(value)
    )
  
  data <- data |> 
    filter(
      !(metric %in% target_variables)
    ) |> 
    bind_rows(
      targ_vars
    )
  
  return(data)
}

df <- target_variable |> 
  map(
    ~ load_data(
      target_variable = .x,
      value_type = "value",
      incl_numerator_remainder = FALSE,
      binary_covid = FALSE
    )
) |> 
  list_rbind() |> 
  select(!c("nhs_region", "quarter", "month")) |> 
  pivot_longer(
    cols = !c("year", "org"),
    names_to = "metric",
    values_to = "value"
  ) |> 
  distinct() |> 
  clean_target_variables(
    target_variables = target_variable
  )

min_max_years <- df |> 
  filter(!is.na(value)) |> 
  summarise(
    min_year = min(year),
    max_year = max(year),
    .by = metric
  )

df <- df |> 
  left_join(
    metrics,
    by = join_by(
      metric
    )
  ) |> 
  filter(
    !grepl("Total - Acute", metric)
  ) |> 
  mutate(
    domain = factor(domain, levels = c("Performance", "Demand", "Capacity"))
  ) |>
  left_join(
    min_max_years,
    by = join_by(
      metric
    )
  ) |> 
  filter(
    between(
      year,
      min_year,
      max_year
    )
  ) 


df_final <- df |> 
  select(!c("year", "org")) |> 
  tidyr::nest(
    .by = c(domain, metric, min_year, max_year)
  ) |> 
  mutate(
    data = map(
      data,
      \(x) x |> 
        summary() |> 
        as.data.frame() |> 
        separate(
          Freq,
          sep = ":",
          into = c("stat", "val")
        ) |> 
        mutate(
          stat = str_trim(stat),
          val = as.numeric(val)
        ) |> 
        select(
          !c("Var1", "Var2")
        ) |> 
        pivot_wider(
          names_from = stat,
          values_from = val
        )
    )
  ) |> 
  tidyr::unnest(
    cols = data
  ) |> 
  mutate(
    `NA's` = replace_na(`NA's`, 0),
    across(
      c(`Min.`, `1st Qu.`, Median, Mean, `3rd Qu.`, `Max.`),
      ~ round(.x, 1)
    )
  ) |> 
  arrange(
    domain, desc(metric)
  )


abbreviate_domain_metric_year <- function(vec, str_length, met, min_yr, max_yr) {
  abbreviation <- paste0(
    "(",
    substr(vec, 1, str_length),
    ") ",
    met,
    " (",
    min_yr,
    "-",
    max_yr,
    ")"
  )
}

max_x_limit <- 100

main_plot <- df_final |> 
  rename(
    min = "Min.",
    max = "Max.",
    first_quartile = "1st Qu.",
    third_quartile = "3rd Qu.",
    mean = "Mean",
    median = "Median",
    Domain = "domain",
    Metric = "metric",
    Minimum.year = "min_year",
    Maximum.year = "max_year"
  ) |> 
  mutate(
    metric = case_when(
      Domain == "Performance" ~ abbreviate_domain_metric_year(Domain, 4, Metric, Minimum.year, Maximum.year),
      .default = abbreviate_domain_metric_year(Domain, 3, Metric, Minimum.year, Maximum.year)
    ),
    .keep = "unused"
  ) |> 
  mutate(
    across(
      .cols = all_of(
        c("min", 
          "first_quartile",
          "mean",
          "median",
          "third_quartile",
          "max"
        )
      ),
      .fns = ~ if_else(.x > max_x_limit, as.character(.x), "-"),
      .names = "{.col}_label"
    )
  ) |> 
  mutate(
    final_label = paste0(
      "(",
      min_label,
      ", ",
      first_quartile_label,
      ", ",
      median_label,
      ", ",
      mean_label,
      ", ",
      third_quartile_label,
      ", ",
      max_label,
      ")"
    ),
    final_label = case_when(
      final_label == "(-, -, -, -, -, -)" ~ NA_character_,
      .default = final_label
    ),
    .keep = "unused"
  ) |> 
  mutate(
    across(
      .cols = all_of(
        c("min",
          "first_quartile",
          "third_quartile",
          "max"
        )
      ),
      .fns = ~ if_else(.x > max_x_limit, max_x_limit, .x)
    ),
    across(
      .cols = all_of(
        c("mean",
          "median"
        )
      ),
      .fns = ~ if_else(.x > max_x_limit, NA_real_, .x)
    )
  ) |> #View()
  ggplot(
    aes(
      y = metric
    )
  ) +
  geom_segment(
    aes(
      x = min,
      xend = max,
      yend = metric
    ),
    colour = "gray50"
  ) +
  geom_segment(
    aes(
      x = first_quartile,
      xend = third_quartile,
      yend = metric
    ),
    colour = "black",
    linewidth = 1
  ) + 
  geom_point(
    aes(
      x = mean
    ), 
    shape = 16,
    size = 4
  ) +
  geom_point(
    aes(
      x  = median
    ),
    shape = 4,
    size = 4
  ) +
  geom_text(
    aes(
      label = final_label,
      x = max_x_limit * 1.02
    ),
    hjust = 0,
    size = 3
  ) +
  coord_cartesian(
    xlim = c(0, max_x_limit),
    ylim = c(0, NA),
    expand = FALSE,
    clip = "off"
  ) +
  theme_bw() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    plot.margin = margin(
      r = 180
    )
  ) +
  labs(
    x = "Value",
    y = "",
    title = ""
  ) +
  annotate(
    "text", 
    x = max_x_limit * 1.02, 
    y = -1, 
    size = 3,
    hjust = 0,
    label = "(Min, 1st.Qu.,Med, Mean, 3rd.Qu., Max)")

legend_plot <- tibble(
  min = 0,
  first_quartile = 0.25,
  median = 0.7,
  mean = 1,
  third_quartile = 1.3, 
  max = 1.6,
  metric = "(Domain) Metric name"
) |> 
  ggplot(
    aes(y = metric)
  ) +
  geom_segment(
    aes(
      x = min,
      xend = max,
      yend = metric
    ),
    colour = "gray50"
  ) +
  geom_segment(
    aes(
      x = first_quartile,
      xend = third_quartile,
      yend = metric
    ),
    colour = "black",
    linewidth = 1
  ) + 
  geom_point(
    aes(
      x = mean
    ), 
    shape = 16,
    size = 4
  ) +
  geom_point(
    aes(
      x  = median
    ),
    shape = 4,
    size = 4
  ) +
  geom_text(
    data = tibble(
      position = c(0, 0.25, 0.7, 1, 1.3, 1.6),
      label = c("Min", "1st.Qu.", "Median", "Mean", "3rd.Qu.", "Max"),
      metric = "(Domain) Metric name"
    ),
    aes(
      x = position,
      label = label
    ),
    vjust = -1
  ) +
  theme_void() +
  theme(
    axis.text.y = element_text()
  ) +
  scale_y_discrete(
    expand = expansion(add = 1.5)
  )

layout <- "
AAAAA
#####
#BB##
"

final_plot <- main_plot / legend_plot +
  patchwork::plot_layout(
    heights = c(25, 0.5, 1.5),
    design = layout
  )

final_plot



```

