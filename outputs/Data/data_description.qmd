---
title: "Description"
format: html
order: 2
execute: 
  echo: false
---

## Data description

An approximate model of how demand and capacity metrics can be seen below:

![Approximate schematic of relationships between demand and capacity and performance](d_and_c_schematic.png)

```{r}
#| message: false
#| label: source-scripts

source(here::here("R/00_libraries.R"))
source(here::here("R/01_utils.R"))
```

```{r}
#| label: collate-data

dc_data <- list.files(
  here::here("data"), 
  full.names = TRUE
  ) |> 
  (\(x) x[!grepl("configuration-table", x)])() |> 
  purrr::map_dfr(
    read.csv
  ) |> 
  select(
    "metric",
    "year", "quarter", "month", "frequency",
    "org", "org_name", 
    "numerator", "denominator", "value"
  ) |> 
  mutate(
    across(
      c(year, quarter, month),
      as.integer
    )
  )

```



### Data description

The metrics collated for the project are described in the tabs below:

```{r}
#| label: indicator-metadata
#| results: 'asis'

meta_table <- read.csv(here::here("data/configuration-table.csv"),
                       encoding = "latin1") |> 
  filter(
    status == "include" |
      (domain == "Performance" &
         status == "modelled")
  ) |> 
  select("domain", "metric") |> 
  arrange(domain, metric)
  
cat("::: {.panel-tabset}\n\n")

for (dom in (sort(unique(meta_table$domain)))) {
  cat(paste("##",
          dom,
          "\n\n"))
  
  tb <- meta_table |> 
    filter(
      domain == dom
    ) |> 
    knitr::kable(
      format = "markdown",
      col.names = c("Domain", "Metric")
    )
  
  print(tb)
  
  cat("\n\n")
}

cat(":::")
```

The frequencies these metrics have been collected at are displayed below:

```{r}
#| label: data-frequencies
#| fig-height: 12
#| warning: false

all_data <- dc_data |> 
  inner_join(
    meta_table,
    by = join_by(metric),
    relationship = "many-to-one"
  ) |> 
  arrange(domain, metric) |> 
  mutate(
    abbreviated_metric = abbreviate(metric, 40),
    abbreviated_metric = factor(
      abbreviated_metric,
      levels = rev(unique(abbreviated_metric))
    )
  )

all_data |> 
  distinct(
    metric, frequency, domain, abbreviated_metric
  ) |> 
  ggplot(
    aes(
      x = frequency,
      y = abbreviated_metric
    )
  ) +
  geom_tile(
    aes(fill = domain)
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(
      angle = 45,
      hjust = 1
    )
  ) +
  labs(
    title = "Metrics and their frequencies within publications",
    y = "Metrics (abbreviated)",
    x = "Frequencies"
  ) +
  scale_fill_manual(
    name = "",
    values = c(
      Demand = "#AC2572",
      Capacity = "#681C66",
      Performance = "#BD518F"
    )
  )


```

For the annual metric (financial and calendar year), these are the number of record we have for each year (this is related to the geography the metric is published at):

```{r}
#| label: annual-metric-counts
#| fig-height: 11

all_data |> 
  filter(
    grepl("annual", frequency)
  ) |> 
  count(domain, abbreviated_metric, year) |> 
  ggplot(
    aes(
      x = year,
      y = abbreviated_metric
    )
  ) +
  geom_tile(
    aes(fill = n)
  ) +
  theme_minimal() +
  scale_fill_viridis_c(
    name = "Count of records"
  ) +
  labs(
    title = "Count of records by year",
    y = "Metrics (abbreviated)",
    x = "Year"
  ) +
  facet_grid(
    rows = vars(domain),
    scales = "free_y",
    space = "free_y"
  )
```



```{r}
#| label: box-plots
#| warning: false
#| results: 'asis'
#| fig-width: 12
#| fig-height: 20
#| include: false

sense_check <- all_data |> 
  filter(
    grepl("annual", frequency)
  )

boxplot_domains <- function(data) {
  p <- data |> 
    mutate(
      metric = stringr::str_wrap(metric, 20)
    ) |>
    ggplot(
      aes(
        x = as.factor(year),
        y = value
        )
      ) + 
    geom_boxplot() +
    theme_minimal() +
    facet_wrap(
      facets = vars(metric),
      scales = "free"
    ) +
    labs(
      x = "",
      y = ""
    ) +
    theme(
      axis.text.x = element_text(
        angle = 45,
        hjust = 1
      )
    )
  
  return(p)
}

cat("::: {.panel-tabset}\n\n")

for (dom in (unique(sense_check$domain))) {
  cat(paste("##",
          dom,
          "\n\n"))
  
  p <- sense_check |> 
    filter(domain == dom) |> 
    boxplot_domains()
  
  print(p)
  
  cat("\n\n")
}

cat(":::")


```

