---
title: "Random Forest"
order: 3
---

```{r}
#| label: setup
#| message: false

source(here::here("R/00_libraries.R"))
source(here::here("R/01_utils.R"))
source(here::here("R/04_modelling_utils.R"))
```


## Select fields

```{r}
#| label: field-selection

target_variable <- "Proportion of completed pathways greater than 18 weeks from referral (admitted)"

dc_data <- load_data(target_variable) |> 
  select(
    all_of(c("org", "year", target_variable)),
    matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")
  ) |> 
  dplyr::filter(
    # retain all rows where target variable is not na
    # retain all rows where we have population age group information
    if_all(
      all_of(
        c(target_variable, "Proportion of population in age band (80-89)")), ~ !is.na(.))
  ) |> 
  arrange(
    year, org
  )
results <- list()
results_table <- list()
```

## Modelling descriptions and results

### Time series splitting

#### Random forest model with no lagged data

* No lagged data
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* data are ordered by time before splitting into train (2014-2020), val (2021) and test (2022)
* impute missing with knn for all predictors

```{r}
#| label: rf-no-lag-ts
#| warning: false
rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 0, 
  time_series_split = TRUE, 
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["TS-split, all years, no lag"]] <- rf$evaluation_metrics
results_table[["TS-split, all years, no lag"]] <- rf$inputs

```

#### Random forest model current and lag

* Current year and lagged data (including lagged target variable)
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* data are ordered by time before splitting into train (2014-2020), val (2021) and test (2022)
* impute missing with knn for all predictors

```{r}
#| label: rf-lag-and-current-ts
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 1, 
  keep_current = TRUE,
  remove_lag_target = FALSE,
  time_series_split = TRUE, 
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["TS-split, all years, 1 yr lag, lagged target"]] <- rf$evaluation_metrics
results_table[["TS-split, all years, 1 yr lag, lagged target"]] <- rf$inputs

```

#### Random forest model using only lagged data

* Only lagged data (including lagged target variable)
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* data are ordered by time before splitting into train (2015-2020), val (2021) and test (2022)
* impute missing with knn for all predictors

```{r}
#| label: rf-lag-ts
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 1, 
  keep_current = FALSE,
  remove_lag_target = FALSE,
  time_series_split = TRUE, 
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["TS-split, all years, 1 yr lag, no current year, lagged target"]] <- rf$evaluation_metrics
results_table[["TS-split, all years, 1 yr lag, no current year, lagged target"]] <- rf$inputs

```

#### Random forest model using only lagged data (without lagged target variable)

* Only lagged data (not including lagged target variable)
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* data are ordered by time before splitting into train (2015-2020), val (2021) and test (2022)
* impute missing with knn for all predictors

```{r}
#| label: rf-lag-only-no-target-ts
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 1,
  keep_current = FALSE,
  remove_lag_target = TRUE, 
  time_series_split = TRUE, 
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["TS-split, all years, 1 yr lag, no current year, no lagged target"]] <- rf$evaluation_metrics
results_table[["TS-split, all years, 1 yr lag, no current year, no lagged target"]] <- rf$inputs

```

### Time series splitting with two years of training data

#### Random forest model with no lagged data

* No lagged data
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* data are ordered by time before splitting into train (2020), val (2021) and test (2022)
* impute missing with knn for all predictors

```{r}
#| label: rf-no-lag-ts-2yrs
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 0, 
  time_series_split = TRUE, 
  training_years = 2,
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["TS-split, 2 years for training, no lag"]] <- rf$evaluation_metrics
results_table[["TS-split, 2 years for training, no lag"]] <- rf$inputs

```

#### Random forest model current and lag

* Current year and lagged data (including lagged target variable)
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* data are ordered by time before splitting into train (2020), val (2021) and test (2022)
* impute missing with knn for all predictors

```{r}
#| label: rf-lag-and-current-ts-2yrs
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 1, 
  keep_current = TRUE,
  remove_lag_target = FALSE,
  time_series_split = TRUE, 
  training_years = 2,
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["TS-split, 2 years for training, 1 yr lag, lagged target"]] <- rf$evaluation_metrics
results_table[["TS-split, 2 years for training, 1 yr lag, lagged target"]] <- rf$inputs

```

#### Random forest model using only lagged data

* Only lagged data (including lagged target variable)
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* data are ordered by time before splitting into train (2020), val (2021) and test (2022)
* impute missing with knn for all predictors

```{r}
#| label: rf-lag-ts-2yrs
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 1, 
  keep_current = FALSE,
  remove_lag_target = FALSE,
  time_series_split = TRUE, 
  training_years = 2,
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["TS-split, 2 years for training, 1 yr lag, no current year, lagged target"]] <- rf$evaluation_metrics
results_table[["TS-split, 2 years for training, 1 yr lag, no current year, lagged target"]] <- rf$inputs

```

#### Random forest model using only lagged data (without lagged target variable)

* Only lagged data (not including lagged target variable)
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* data are ordered by time before splitting into train (2020), val (2021) and test (2022)
* impute missing with knn for all predictors

```{r}
#| label: rf-lag-only-no-target-ts-2yrs
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 1,
  keep_current = FALSE,
  remove_lag_target = TRUE, 
  time_series_split = TRUE, 
  training_years = 2,
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["TS-split, 2 years for training, 1 yr lag, no current year, no lagged target"]] <- rf$evaluation_metrics
results_table[["TS-split, 2 years for training, 1 yr lag, no current year, no lagged target"]] <- rf$inputs

```

### Time series splitting with two years of shuffled training data

#### Random forest model with no lagged data

* No lagged data
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* data are ordered by time before splitting out test, then train and val are shuffled: train (2020/21), val (2020/21) and test (2022)
* impute missing with knn for all predictors

```{r}
#| label: rf-no-lag-ts-2yrs-shuffled
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 0, 
  time_series_split = TRUE, 
  training_years = 2,
  shuffle_training_records = TRUE,
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["TS-split, 2 years shuffled for training, no lag"]] <- rf$evaluation_metrics
results_table[["TS-split, 2 years shuffled for training, no lag"]] <- rf$inputs

```

#### Random forest model current and lag

* Current year and lagged data (including lagged target variable)
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* data are ordered by time before splitting out test, then train and val are shuffled: train (2020/21), val (2020/21) and test (2022)
* impute missing with knn for all predictors

```{r}
#| label: rf-lag-and-current-ts-2yrs-shuffled
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 1, 
  keep_current = TRUE,
  remove_lag_target = FALSE,
  time_series_split = TRUE, 
  training_years = 2,
  shuffle_training_records = TRUE,
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["TS-split, 2 years shuffled for training, 1 yr lag, lagged target"]] <- rf$evaluation_metrics
results_table[["TS-split, 2 years shuffled for training, 1 yr lag, lagged target"]] <- rf$inputs

```

#### Random forest model using only lagged data

* Only lagged data (including lagged target variable)
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* data are ordered by time before splitting out test, then train and val are shuffled: train (2020/21), val (2020/21) and test (2022)
* impute missing with knn for all predictors

```{r}
#| label: rf-lag-ts-2yrs-shuffled
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 1, 
  keep_current = FALSE,
  remove_lag_target = FALSE,
  time_series_split = TRUE, 
  training_years = 2,
  shuffle_training_records = TRUE,
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["TS-split, 2 years shuffled for training, 1 yr lag, no current year, lagged target"]] <- rf$evaluation_metrics
results_table[["TS-split, 2 years shuffled for training, 1 yr lag, no current year, lagged target"]] <- rf$inputs

```

#### Random forest model using only lagged data (without lagged target variable)

* Only lagged data (not including lagged target variable)
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* data are ordered by time before splitting out test, then train and val are shuffled: train (2020/21), val (2020/21) and test (2022)
* impute missing with knn for all predictors

```{r}
#| label: rf-lag-only-no-target-ts-2yrs-shuffled
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 1,
  keep_current = FALSE,
  remove_lag_target = TRUE, 
  time_series_split = TRUE, 
  training_years = 2,
  shuffle_training_records = TRUE,
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["TS-split, 2 years shuffled for training, 1 yr lag, no current year, no lagged target"]] <- rf$evaluation_metrics
results_table[["TS-split, 2 years shuffled for training, 1 yr lag, no current year, no lagged target"]] <- rf$inputs

```

### Non-time series splitting

#### Random forest model with no lagged data

* No lagged data
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* impute missing with knn for all predictors

```{r}
#| label: rf-no-lag
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 0, 
  time_series_split = FALSE, 
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["Random-split, all years, no lag"]] <- rf$evaluation_metrics
results_table[["Random-split, all years, no lag"]] <- rf$inputs

```

#### Random forest model current and lag

* Current year and lagged data (including lagged target variable)
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* impute missing with knn for all predictors

```{r}
#| label: rf-lag-and-current
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 1, 
  keep_current = TRUE,
  remove_lag_target = FALSE,
  time_series_split = FALSE, 
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["Random-split, all years, 1 yr lag, lagged target"]] <- rf$evaluation_metrics
results_table[["Random-split, all years, 1 yr lag, lagged target"]] <- rf$inputs
```

#### Random forest model using only lagged data

* Only lagged data (including lagged target variable)
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* impute missing with knn for all predictors

```{r}
#| label: rf-lag
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 1, 
  keep_current = FALSE,
  remove_lag_target = FALSE,
  time_series_split = FALSE, 
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["Random-split, all years, 1 yr lag, no current year, lagged target"]] <- rf$evaluation_metrics
results_table[["Random-split, all years, 1 yr lag, no current year, lagged target"]] <- rf$inputs
```

#### Random forest model using only lagged data (without lagged target variable)

* Only lagged data (not including lagged target variable)
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* impute missing with knn for all predictors

```{r}
#| label: rf-lag-only-no-target
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 1,
  keep_current = FALSE,
  remove_lag_target = TRUE, 
  time_series_split = FALSE, 
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["Random-split, all years, 1 yr lag, no current year, no lagged target"]] <- rf$evaluation_metrics
results_table[["Random-split, all years, 1 yr lag, no current year, no lagged target"]] <- rf$inputs
```

### Non-time series splitting with two years of shuffledtraining data

#### Random forest model with no lagged data

* No lagged data
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* two years of training data
* impute missing with knn for all predictors

```{r}
#| label: rf-no-lag-2yrs
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 0, 
  time_series_split = FALSE, 
  training_years = 2,
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["Random-split, two years for training, no lag"]] <- rf$evaluation_metrics
results_table[["Random-split, two years for training, no lag"]] <- rf$inputs

```

#### Random forest model current and lag

* Current year and lagged data (including lagged target variable)
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* two years of training data
* impute missing with knn for all predictors

```{r}
#| label: rf-lag-and-current-2yrs
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 1, 
  keep_current = TRUE,
  remove_lag_target = FALSE,
  time_series_split = FALSE, 
  training_years = 2,
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["Random-split, two years for training, 1 yr lag, lagged target"]] <- rf$evaluation_metrics
results_table[["Random-split, two years for training, 1 yr lag, lagged target"]] <- rf$inputs
```

#### Random forest model using only lagged data

* Only lagged data (including lagged target variable)
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* two years of training data
* impute missing with knn for all predictors

```{r}
#| label: rf-lag-2yrs
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 1, 
  keep_current = FALSE,
  remove_lag_target = FALSE,
  time_series_split = FALSE, 
  training_years = 2,
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["Random-split, two years for training, 1 yr lag, no current year, lagged target"]] <- rf$evaluation_metrics
results_table[["Random-split, two years for training, 1 yr lag, no current year, lagged target"]] <- rf$inputs
```

#### Random forest model using only lagged data (without lagged target variable)

* Only lagged data (not including lagged target variable)
* selection pattern: `matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS")`
* two years of training data
* impute missing with knn for all predictors

```{r}
#| label: rf-lag-only-no-target-2yrs-shuffled
#| warning: false

rf <- modelling_performance(
  data = dc_data,
  target_variable = target_variable,
  lagged_years = 1,
  keep_current = FALSE,
  remove_lag_target = TRUE, 
  time_series_split = FALSE, 
  training_years = 2,
  model_type = "random_forest", 
  seed = 321 
)

rf$evaluation_metrics

results[["Random-split, two years for training, 1 yr lag, no current year, no lagged target"]] <- rf$evaluation_metrics
results_table[["Random-split, two years for training, 1 yr lag, no current year, no lagged target"]] <- rf$inputs
```

## Results summary

```{r}
#| label: plot-results
#| out-width: 10in
#| fig-width: 9
#| fig-height: 7

results |> 
  bind_rows(
    .id = "model_description"
  ) |> 
  filter(.metric == "rsq") |> 
  pivot_longer(
    cols = c(train, validation, test),
    names_to = "dataset",
    values_to = "rsq"
  ) |> 
  ggplot(
    aes(
      x = str_wrap(model_description, 40),
      y = rsq
    )
  ) + 
  geom_point(
    aes(colour = dataset,
        shape = dataset)
  ) +
  labs(
    title = "Evaluation metrics for different types of random forest models",
    x = "Model description",
    y = "R squared"
  ) +
  theme_minimal() +
  scale_colour_manual(
    name = "Type",
    values = c(
      test = "#33a02c",
      validation = "#ff7f00",
      train = "#1f78b4"
    ),
    labels = c(
      test = "Test",
      validation = "Validation",
      train = "Train"
    ),
    breaks = c("train", "validation", "test"),
    drop = TRUE
  ) +
  scale_shape_manual(
    name = "Type",
    values = c(
      test = 15,
      validation = 16,
      train = 17
    ),
    labels = c(
      test = "Test",
      validation = "Validation",
      train = "Train"
    ),
    breaks = c("train", "validation", "test"),
    drop = TRUE
  ) +
  ylim(0, 1) +
  theme(
    axis.text.x = element_text(
      angle = 90,
      hjust = 1,
      vjust = 0.5
    )
  )

```

### Summary table

```{r}
#| label: summary-table
#| echo: false

rsq <- results |> 
  bind_rows(
    .id = "model_description"
  ) |> 
  filter(
    .metric == "rsq"
  ) |> 
  select(
    c("model_description", ".metric", "train", "validation", "test")
  )

results_table |> 
  bind_rows(
    .id = "model_description"
  ) |> 
  left_join(
    rsq,
    by = join_by(model_description),
    relationship = "one-to-one"
  ) |> 
  mutate(
    across(
      c(train, test, validation),
      ~ round(.x, 3)
    )
  ) |> 
  select(!c("model_description", "Model type")) |> 
  DT::datatable(
    filter = "top",
    rownames = FALSE
  ) |> 
  DT::formatStyle(
    columns = c(1:11), 
    fontSize = '75%')
  

```