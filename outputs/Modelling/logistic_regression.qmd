---
title: "Logistic regression"
order: 4
---

```{r}
#| label: setup
#| message: false

source(here::here("R/00_libraries.R"))
source(here::here("R/01_utils.R"))
source(here::here("R/04_modelling_utils.R"))
```


## Logistic model considerations

The metrics that have been collected are either proportions (numerator and denominator are from the same sample), rates, or the raw numerators and denominators. 

## Methods

The following decisions require evaluating to finalise the best model for each target variable:

* the number of historic years to use for training a model to predict the target variable
* how many lagged years to include for training a model to predict the target variable
* the most appropriate method of imputing missing data in the prediction variables
* some predictor variables will be correlated; in the preprocessing steps, highly correlated variables should be removed to allow the model to learn better from the remaining predictor variables. The threshold to determine what variables are "highly-correlated" needs to be determined

Another pre-processing step is to centre and scale the predictor variables to enhance the ability to interpret the final model.

Once pre-processing is complete, the model is trained on the years prior to the year we are attempting to predict for, then linear assumptions are checked.

Finally, the models are evaluated using the R^2^ value when applying that trained model to the year that is being predicted (is this right???).

## Modelling proportions

### Setting up the data

```{r}
#| label: field-selection-proportions

target_variable <- "Proportion of completed pathways greater than 18 weeks from referral (admitted)"

dc_data <- load_data(
  target_variable, 
  incl_numerator_remainder = TRUE,
  value_type = "value") |> 
  select(
    all_of(c("org", "year", target_variable)),
    any_of(c("numerator", "remainder")),
    matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS|QOF")
  ) |> 
  dplyr::filter(
    # retain all rows where target variable is not na
    # retain all rows where we have population age group information
    if_all(
      all_of(
        c(target_variable, "Proportion of population in age band (80-89)")), ~ !is.na(.))
  ) |> 
  arrange(
    year, org
  )
```

### Configuration

```{r}
#| label: configure-inputs-proportions

# correlation thresholds between 0.3 and 0.9
# 2 to 6 years of training data

inputs <- expand.grid(
  corr = seq(from = 0.3, to = 0.9, by = 0.05),
  yrs = 2:6
)

```

### Modelling

```{r}
#| label: modelling-proportions
#| warning: false

logistic <- map2(
  .x = inputs$corr,
  .y = inputs$yrs,
  ~ modelling_performance(
    data = dc_data,
    target_variable = target_variable,
    lagged_years = 1, 
    remove_lag_target = TRUE,
    shuffle_training_records = TRUE,
    keep_current = FALSE,
    time_series_split = TRUE, 
    model_type = "logistic_regression", 
    linear_correlation_threshold = .x,
    seed = 321 ,
    training_years = .y,
    predict_proportions = TRUE
  )
)


```

### Results summary

```{r}
#| label: plot-results-proportions
#| out-width: 10in
#| fig-width: 9
#| fig-height: 7

logistic |> 
  map_df(
    ~ pluck(.x, "evaluation_metrics")
  ) |> 
  filter(
    .metric == "rsq"
  ) |> 
  bind_cols(inputs) |> 
  pivot_longer(
    cols = c(train, validation, test),
    names_to = "data_type",
    values_to = "rsq"
  ) |> 
  mutate(
    yrs = paste(
      yrs, "years"
    )
  ) |> 
  ggplot(
    aes(
      x = corr,
      y = rsq
    )
  ) +
  geom_line(
    aes(
      group = data_type,
      colour = data_type
    )
  ) +
  theme_minimal() +
  facet_wrap(
    facets = vars(yrs)
  ) +
  ylim(0,1) +
  scale_colour_manual(
    name = "Type",
    values = c(
      test = "#33a02c",
      validation = "#ff7f00",
      train = "#1f78b4"
    ),
    labels = c(
      test = "Test",
      validation = "Validation",
      train = "Train"
    ),
    breaks = c("train", "validation", "test"),
    drop = TRUE
  ) +
  labs(
    title = "Rsq for logistic regression for different values of correlation threshold and number of training years",
    subtitle = "Only last years data used (without target variable), shuffled training data",
    caption = target_variable,
    x = "Correlation threshold",
    y = bquote(~R^2)
  )

```

### Summary table

```{r}
#| label: summary-table-proportions
#| echo: false

logistic |> 
  map_df(
    ~ pluck(.x, "evaluation_metrics")
  ) |> 
  filter(
    .metric == "rsq"
  ) |>
  bind_cols(inputs) |> 
  mutate(
    across(
      c(train, test, validation),
      ~ round(.x, 3)
    ),
    corr = round(corr, 2)
  ) |> 
  select(
    c(
      `Correlation threshold` = "corr", 
      `Training years` = "yrs",
      Metric = ".metric", 
      `Training data` = "train", 
      `Validation data` = "validation", 
      `Test data` = "test"
    )
  ) |> 
  DT::datatable(
    filter = "top",
    rownames = FALSE
  ) |> 
  DT::formatStyle(
    columns = c(1:6), 
    fontSize = '75%')
  

```

## Modelling numerators

### Setting up the data

```{r}
#| label: field-selection-numerators

target_variable <- "Proportion of completed pathways greater than 18 weeks from referral (admitted)"

dc_data <- load_data(
  target_variable, 
  incl_numerator_remainder = TRUE,
  value_type = "numerator") |> 
  select(
    all_of(c("org", "year", target_variable)),
    any_of(c("numerator", "remainder")),
    matches("^ESR|^Workforce|^Bed|age band|Year 6|GPPS|QOF")
  ) |> 
  dplyr::filter(
    # retain all rows where target variable is not na
    # retain all rows where we have population age group information
    if_all(
      all_of(
        c(target_variable, "Proportion of population in age band (80-89)")), ~ !is.na(.))
  ) |> 
  arrange(
    year, org
  )
```

### Configuration

```{r}
#| label: configure-inputs-numerators

# correlation thresholds between 0.3 and 0.9
# 2 to 6 years of training data

inputs <- expand.grid(
  corr = seq(from = 0.3, to = 0.9, by = 0.05),
  yrs = 2:6
)

```

### Modelling

```{r}
#| label: modelling-numerators
#| warning: false

logistic <- map2(
  .x = inputs$corr,
  .y = inputs$yrs,
  ~ modelling_performance(
    data = dc_data,
    target_variable = target_variable,
    lagged_years = 1, 
    remove_lag_target = TRUE,
    shuffle_training_records = TRUE,
    keep_current = FALSE,
    time_series_split = TRUE, 
    model_type = "logistic_regression", 
    linear_correlation_threshold = .x,
    seed = 321 ,
    training_years = .y,
    predict_proportions = FALSE
  )
)


```

### Results summary

```{r}
#| label: plot-results-numerators
#| out-width: 10in
#| fig-width: 9
#| fig-height: 7

logistic |> 
  map_df(
    ~ pluck(.x, "evaluation_metrics")
  ) |> 
  filter(
    .metric == "rsq"
  ) |> 
  bind_cols(inputs) |> 
  pivot_longer(
    cols = c(train, validation, test),
    names_to = "data_type",
    values_to = "rsq"
  ) |> 
  mutate(
    yrs = paste(
      yrs, "years"
    )
  ) |> 
  ggplot(
    aes(
      x = corr,
      y = rsq
    )
  ) +
  geom_line(
    aes(
      group = data_type,
      colour = data_type
    )
  ) +
  theme_minimal() +
  facet_wrap(
    facets = vars(yrs)
  ) +
  ylim(0,1) +
  scale_colour_manual(
    name = "Type",
    values = c(
      test = "#33a02c",
      validation = "#ff7f00",
      train = "#1f78b4"
    ),
    labels = c(
      test = "Test",
      validation = "Validation",
      train = "Train"
    ),
    breaks = c("train", "validation", "test"),
    drop = TRUE
  ) +
  labs(
    title = "Rsq for logistic regression for different values of correlation threshold and number of training years",
    subtitle = "Only last years data used (without target variable), shuffled training data",
    caption = target_variable,
    x = "Correlation threshold",
    y = bquote(~R^2)
  )

```

### Summary table

```{r}
#| label: summary-table-numerators
#| echo: false

logistic |> 
  map_df(
    ~ pluck(.x, "evaluation_metrics")
  ) |> 
  filter(
    .metric == "rsq"
  ) |>
  bind_cols(inputs) |> 
  mutate(
    across(
      c(train, test, validation),
      ~ round(.x, 3)
    ),
    corr = round(corr, 2)
  ) |> 
  select(
    c(
      `Correlation threshold` = "corr", 
      `Training years` = "yrs",
      Metric = ".metric", 
      `Training data` = "train", 
      `Validation data` = "validation", 
      `Test data` = "test"
    )
  ) |> 
  DT::datatable(
    filter = "top",
    rownames = FALSE
  ) |> 
  DT::formatStyle(
    columns = c(1:6), 
    fontSize = '75%')
  

```